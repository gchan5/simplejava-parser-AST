//TEAM MEMBERS: GILBERT CHAN, JOSEPH PEREZ

options {
  IGNORE_CASE=false;
}

PARSER_BEGIN(simplejava)

public class simplejava {
}


PARSER_END(simplejava)

TOKEN_MGR_DECLS :
{
    public static int numcomments = 0;
}

SKIP :
{
    < "//" > : INLINE_COMMENT
|   < " " >
|   < "\n" >
|   < "\t" >
|   < "\r" >
}

SKIP :
{
< "/*" > {numcomments++;}: IN_MULTI_LINE_COMMENT
}

<IN_MULTI_LINE_COMMENT>
SKIP :
{
    < " " >
|   < "/*"> {numcomments++;}
|   < "*/" > {numcomments--; if(numcomments == 0) SwitchTo(DEFAULT);}
|   < ~[] >
}

<INLINE_COMMENT>
SKIP :
{
    <"\n"> : DEFAULT
|   < ~[] >
}

TOKEN :
{
    <INTEGER_LITERAL: (["0"-"9"])+>
|   < DO: "do">
|   < ELSE: "else">
|   < FALSE: "false">
|   < FOR: "for">
|   < IF: "if">
|   < TRUE: "true">
|   < WHILE: "while">
|   < RETURN: "return">
|   < PLUS_EQUALS: "+=">
|   < NOT_EQUALS: "!=">
|   < EQUALS_EQUALS: "==">
|   < LESS_THAN_EQUAL_TO: "<=">
|   < GREATER_THAN_EQUAL_TO: ">=">
|   < PLUS_PLUS: "++">
|   < MINUS_MINUS: "--">
|   < AND: "&&">
|   < OR: "||">
|   <IDENTIFIER: ["a"-"z", "A"-"Z"](["a"-"z", "A"-"Z","0"-"9", "_"])*>
}

TOKEN :
{
    < EQUALS: "=" >
|   < PLUS: "+" >
|   < MINUS: "-" >
|   < ASTERISK: "*" >
|   < SLASH: "/" >
|   < LEFT_PARENTHESIS: "(">
|   < RIGHT_PARENTHESIS: ")">
|   < LEFT_BRACE: "{">
|   < RIGHT_BRACE: "}">
|   < LEFT_BRACKET: "[">
|   < RIGHT_BRACKET: "]">
|   < PERIOD: ".">
|   < COMMA: ",">
|   < SEMICOLON: ";">
|   < LESS_THAN: "<">
|   < GREATER_THAN: ">">
|   < NOT: "!">
}


ASTProgram program():
{ASTFunction main; ASTFunctionDefinitions f = new ASTFunctionDefinitions();}
{
    main = main_func() {f.addElement(main);}
    {return new ASTProgram(new ASTClasses(), f, 0);}
    <EOF>
}

ASTFunction main_func():
{
    ASTFunction result;
    ASTStatement statement;
    String type;
    String name;
}
{
    type = <IDENTIFIER>.image name = <IDENTIFIER>.image
    <LEFT_PARENTHESIS><RIGHT_PARENTHESIS>
    <LEFT_BRACE> statement = statements()
        {return new ASTFunction(type, name, new ASTFormals(), statement, 0);}
}

ASTStatements statements():
{ASTStatements s = new ASTStatements(); ASTStatement statement;}
{
    (statement = var_statement() {s.addElement(statement);})*
    <RIGHT_BRACE> {return s;}
}

ASTStatement var_statement():
{
    ASTStatement statement;
    ASTBaseVariable variable;
    String name = "";
    String type = "";
    int arraydimension = 0;
    ASTExpression init;
}
{
    type = <IDENTIFIER>.image name = <IDENTIFIER>.image

    (   <SEMICOLON> {
            return new ASTVariableDefStatement(type, name, 0);}
    |   <EQUALS> init = expression() <SEMICOLON> {
            return new ASTVariableDefStatement(type, name, init, 0);})


    // ASTAssignmentStatement(ASTVariable variable, ASTExpression value, int line)
    // ASTVariableDefStatement(String type, String name, int arraydimension, ASTExpression init, int line)
}

ASTExpression expression():
{
    ASTExpression init;
    String var;
}
{
    <LEFT_PARENTHESIS> expression() <RIGHT_PARENTHESIS>
|   var = <INTEGER_LITERAL>.image {init = (ASTExpression) new ASTIntegerLiteral(Integer.parseInt(var), 0); return init;}
|   var = <IDENTIFIER>.image {init = (ASTExpression) new ASTVariableExpression(new ASTBaseVariable(var, 0), 0); return init;}
}
