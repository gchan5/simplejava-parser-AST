//TEAM MEMBERS: GILBERT CHAN, JOSEPH PEREZ

options {
  IGNORE_CASE=false;
}

PARSER_BEGIN(simplejava)

public class simplejava {
}


PARSER_END(simplejava)

TOKEN_MGR_DECLS :
{
    public static int numcomments = 0;
}

SKIP :
{
    < "//" > : INLINE_COMMENT
|   < " " >
|   < "\n" >
|   < "\t" >
|   < "\r" >
}

SKIP :
{
< "/*" > {numcomments++;}: IN_MULTI_LINE_COMMENT
}

<IN_MULTI_LINE_COMMENT>
SKIP :
{
    < " " >
|   < "/*"> {numcomments++;}
|   < "*/" > {numcomments--; if(numcomments == 0) SwitchTo(DEFAULT);}
|   < ~[] >
}

<INLINE_COMMENT>
SKIP :
{
    <"\n"> : DEFAULT
|   < ~[] >
}

TOKEN :
{
    <INTEGER_LITERAL: (["0"-"9"])+>
|   < DO: "do">
|   < ELSE: "else">
|   < FALSE: "false">
|   < FOR: "for">
|   < IF: "if">
|   < TRUE: "true">
|   < WHILE: "while">
|   < RETURN: "return">
|   < PLUS_EQUALS: "+=">
|   < NOT_EQUALS: "!=">
|   < EQUALS_EQUALS: "==">
|   < LESS_THAN_EQUAL_TO: "<=">
|   < GREATER_THAN_EQUAL_TO: ">=">
|   < PLUS_PLUS: "++">
|   < MINUS_MINUS: "--">
|   < AND: "&&">
|   < OR: "||">
|   <NEW: "new">
|   <CLASS: "class">
|   <IDENTIFIER: ["a"-"z", "A"-"Z"](["a"-"z", "A"-"Z","0"-"9", "_"])*>
}

TOKEN :
{
    < EQUALS: "=" >
|   < PLUS: "+" >
|   < MINUS: "-" >
|   < ASTERISK: "*" >
|   < SLASH: "/" >
|   < LEFT_PARENTHESIS: "(">
|   < RIGHT_PARENTHESIS: ")">
|   < LEFT_BRACE: "{">
|   < RIGHT_BRACE: "}">
|   < LEFT_BRACKET: "[">
|   < RIGHT_BRACKET: "]">
|   < PERIOD: ".">
|   < COMMA: ",">
|   < SEMICOLON: ";">
|   < LESS_THAN: "<">
|   < GREATER_THAN: ">">
|   < NOT: "!">
}

// Matches the three kinds of overhead structures
//      Function definition
//      Function prototype
//      Class definition
ASTProgram program():
{
    ASTFunctionDefinition func;
    ASTFunctionDefinitions f = new ASTFunctionDefinitions();
    ASTClasses c = new ASTClasses();
    ASTClass ast_class;
}
{
    (ast_class = class_def() {c.addElement(ast_class);})*
    (func = function_declaration() {f.addElement(func);})*
    {return new ASTProgram(c, f, 0);}
    <EOF>
}

// Matches the functions of form <ID> <ID> params() block()
ASTFunctionDefinition function_declaration():
{
    ASTStatement statement;
    ASTFormals formals = new ASTFormals();
    ASTFormal f;
    Token type;
    Token name;
    boolean semicolon = false;
}
{
    type = <IDENTIFIER> name = <IDENTIFIER> <LEFT_PARENTHESIS> (LOOKAHEAD(2) f = formal() (<COMMA>)?  {formals.addElement(f);})* <RIGHT_PARENTHESIS>
    (<LEFT_BRACE> | <SEMICOLON> {semicolon = true;})
    {
        if(semicolon) {
            return new ASTPrototype(type.image, name.image, formals, 0);
        }
    }
    statement = statements()
    {return new ASTFunction(type.image, name.image, formals, statement, 0);}
}

ASTFormal formal():
{
    Token type;
    Token name;
    int arraydimension = 0;
}
{
    type = <IDENTIFIER> name = <IDENTIFIER> (<LEFT_BRACKET><RIGHT_BRACKET> {arraydimension++;})*
    {return new ASTFormal(type.image, name.image, arraydimension, 0);}
}

// Matches any kind of statement:
//      generic variable definitions
//      generic variable assignments
//      if-else, for
//      while, do-while
//      return
ASTStatements statements():
{
    ASTStatements s = new ASTStatements();
    ASTStatement statement;
}
{
    (statement = one_statement() {s.addElement(statement);})*
    <RIGHT_BRACE> {return s;}
}

ASTStatement one_statement():
{ASTStatement statement;}
{
    (
        LOOKAHEAD(2) statement = increment_statement() <SEMICOLON> {return statement;}
    |   LOOKAHEAD(2) statement = var_statement() <SEMICOLON> {return statement;}
    |   statement = return_statement() {return statement;}
    |   statement = function_statement() {return statement;}
    |   statement = if_else() {return statement;}
    |   statement = do_while() {return statement;}
    |   statement = while_statement() {return statement;}
    |   statement = block_statement() {return statement;}
    |   statement = for_statement() {return statement;}
    |   statement = empty_statement() {return statement;}
    )
}

ASTReturnStatement return_statement():
{
    ASTExpression value;
    int line = 0;
}
{
    <RETURN> (<SEMICOLON> {value = null;} | value = expression() <SEMICOLON>) {return new ASTReturnStatement(value, line);}
}

ASTAssignmentStatement increment_statement():
{
    Token variable_;
    Token operator;
    ASTExpression left;
    ASTExpression right;
    int line = 0;
}
{
    variable_ = <IDENTIFIER> (operator = <PLUS_PLUS> | operator = <MINUS_MINUS>)
    {return new ASTAssignmentStatement(new ASTBaseVariable(variable_.image, line),
                                           new ASTOperatorExpression(new ASTVariableExpression(new ASTBaseVariable(variable_.image, line), line), new ASTIntegerLiteral(1, line),
                                                operator.image.substring(1), line), line);}
}


// ASTAssignmentStatement(ASTVariable variable, ASTExpression value, int line)
// ASTOperatorExpression(ASTExpression left, ASTExpression right, int operator, int line)

ASTIfStatement if_else():
{
    ASTExpression test = null;
    ASTStatement thenstatement = null;
    ASTStatement elsestatement = null;
    int line = 0;
}
{
    <IF> test = expression()
    thenstatement = one_statement()
    (LOOKAHEAD(2) <ELSE> elsestatement = one_statement())?
    {return new ASTIfStatement(test, thenstatement, elsestatement, line);}
    // ASTIfStatement(ASTExpression test, ASTStatement thenstatement, ASTStatement elsestatement, int line)
}


// Matches any kind of statement that is
//       not a for, if-else, while, do-while, or return
ASTStatement var_statement():
{
    ASTStatement statement;
    ASTVariable variable_ = null;
    String name = "";
    String type = "";
    int arraydimension = 0;
    ASTExpression init = null;
    boolean isDefinition = false;
    boolean isArrayExpression = false;
}
{

    ( LOOKAHEAD(2) type = <IDENTIFIER>.image name = <IDENTIFIER>.image (arraydimension = dimension_consumer() {isArrayExpression = true;})? {isDefinition = true;}
    | LOOKAHEAD(2) variable_ = variable()
    | name = <IDENTIFIER>.image {variable_ = new ASTBaseVariable(name, 0);}
    )

    (<EQUALS> init = expression())?


    {   if(isDefinition){
            if (isArrayExpression){
                if(init == null) {
                    return new ASTVariableDefStatement(type, name, arraydimension, 0);
                } else {
                    return new ASTVariableDefStatement(type, name, arraydimension, init, 0);
                }
            } else{
                if(init == null) {
                    return new ASTVariableDefStatement(type, name, 0);
                } else {
                    return new ASTVariableDefStatement(type, name, init, 0);
                }
            }
        } else{
            return new ASTAssignmentStatement(variable_, init, 0);
        }
    }

    // ASTAssignmentStatement(ASTVariable variable, ASTExpression value, int line)
    // ASTVariableDefStatement(String type, String name, int arraydimension, ASTExpression init, int line)
}

// Matches and returns number of '[]'s
int dimension_consumer():
{int arraydimension = 0;}
{
    (<LEFT_BRACKET><RIGHT_BRACKET>{arraydimension++;})+
    {return arraydimension;}
}


// Matches any expression
// var
// number
// (expression)
// expression && || expression
// expression +- expression
// expression */ expression
ASTExpression expression():
{
    ASTExpression left = null;
    ASTExpression right = null;
    ASTExpression expression_ = null;
    Token operator = null;
    int line = 0;
    boolean only_left = true;
}
{
    left = expression_prime() (LOOKAHEAD(2) (operator = <OR> | operator = <AND>
        ) right = expression_prime() {
        if (only_left) {
            only_left = false ;
            expression_ = new ASTOperatorExpression(left, right, operator.image, line);
        } else {
            expression_ = new ASTOperatorExpression(expression_, right, operator.image, line);
        }
    })*

    {if (only_left) return left; else return expression_;}

    // ASTOperatorExpression(ASTExpression left, ASTExpression right, String operator, int line)
}

ASTExpression expression_prime():
{
    ASTExpression left = null;
    Token operator = null;
    int line = 0;
    boolean not = false;
}
{
    (LOOKAHEAD(2) operator = <NOT> {not = true;})? left = expression_prime_prime()  {
        if (not) {
            return new ASTUnaryOperatorExpression(left, operator.image, line);
        } else {
            return left;
        }
    }

    // ASTUnaryOperatorExpression(ASTExpression operand, int operator, int line) 
}

ASTExpression expression_prime_prime():
{
    ASTExpression left = null;
    ASTExpression right = null;
    ASTExpression expression_ = null;
    Token operator = null;
    int line = 0;
    boolean only_left = true;
}
{
    left = expression_prime_prime_prime() (LOOKAHEAD(2) (operator = <EQUALS_EQUALS> | operator = <NOT_EQUALS>
                                | operator = <LESS_THAN> | operator = <LESS_THAN_EQUAL_TO>
                                | operator = <GREATER_THAN> | operator = <GREATER_THAN_EQUAL_TO>
        ) right = expression_prime_prime_prime() {
        if (only_left) {
            only_left = false ;
            expression_ = new ASTOperatorExpression(left, right, operator.image, line);
        } else {
            expression_ = new ASTOperatorExpression(expression_, right, operator.image, line);
        }
    })*

    {if (only_left) return left; else return expression_;}

    // ASTOperatorExpression(ASTExpression left, ASTExpression right, String operator, int line)
}

ASTExpression expression_prime_prime_prime():
{
    ASTExpression left = null;
    ASTExpression right = null;
    ASTExpression expression_ = null;
    Token operator = null;
    int line = 0;
    boolean only_left = true;
}
{
    left = expression_prime_prime_prime_prime() (LOOKAHEAD(2) (operator = <PLUS> | operator = <MINUS>
        ) right = expression_prime_prime_prime_prime() {
        if (only_left) {
            only_left = false ;
            expression_ = new ASTOperatorExpression(left, right, operator.image, line);
        } else {
            expression_ = new ASTOperatorExpression(expression_, right, operator.image, line);
        }
    })*

    {if (only_left) return left; else return expression_;}

    // ASTOperatorExpression(ASTExpression left, ASTExpression right, String operator, int line)
}

ASTExpression expression_prime_prime_prime_prime():
{
    ASTExpression left = null;
    ASTExpression right = null;
    ASTExpression expression_ = null;
    Token operator = null;
    int line = 0;
    boolean only_left = true;
}
{
    left = expression_base() (LOOKAHEAD(2) (operator = <ASTERISK> | operator = <SLASH>
        ) right = expression_base() {
        if (only_left) {
            only_left = false ;
            expression_ = new ASTOperatorExpression(left, right, operator.image, line);
        } else {
            expression_ = new ASTOperatorExpression(expression_, right, operator.image, line);
        }
    })*

    {if (only_left) return left; else return expression_;}

    // ASTOperatorExpression(ASTExpression left, ASTExpression right, String operator, int line)
}

ASTExpression expression_base():
{
    ASTVariable variable_ = null;
    ASTExpression init;
    Token var;
    String operator;
}
{
    {System.out.println("entered expression_base()");}
    <LEFT_PARENTHESIS> init = expression() <RIGHT_PARENTHESIS> {return init;}
|   init = new_expression() {return init;}
|   LOOKAHEAD(2) init = function_call_expression() {return init;}
|   variable_ = variable() {init = new ASTVariableExpression(variable_, 0); return init;}
|   var = <INTEGER_LITERAL> {return new ASTIntegerLiteral(Integer.parseInt(var.image), 0);}
|   <MINUS> var = <INTEGER_LITERAL> {return new ASTOperatorExpression(new ASTIntegerLiteral(0, 0), new ASTIntegerLiteral(Integer.parseInt(var.image), 0), 2, 0);}
|   <NOT> init = expression() {return new ASTUnaryOperatorExpression(init, 1, 0);}
|   (var = <TRUE> | var = <FALSE>) {return new ASTBooleanLiteral(Boolean.parseBoolean(var.image), 0);}
}

ASTFunctionCallExpression function_call_expression():
{
    ASTExpression e;
    ASTFunctionCallExpression fe = new ASTFunctionCallExpression("", 0);
    Token name;
}
{
    {System.out.println("entered function_call_expression");}
    name = <IDENTIFIER> {fe.setname(name.image);} <LEFT_PARENTHESIS> (e = expression() (<COMMA>)? {fe.addElement(e);})* <RIGHT_PARENTHESIS>
    {return fe;}
}

ASTVariable variable():
{
    ASTVariable init;
    String base;
    System.out.println("entered variable");
}
{
    base = <IDENTIFIER>.image
    {init = new ASTBaseVariable(base, 0);}

    // repeatedly try to call complex using the current init as our base
    // each call will update init
    (init = complex(init))*
    {return init;}

    // ASTVariableExpression(ASTVariable variable, int line)
}

ASTVariable complex(ASTVariable base):
{
    ASTExpression index;
    Token t;
}
{
    <LEFT_BRACKET> index = expression() <RIGHT_BRACKET> {
        return new ASTArrayVariable(base, index, 0);}
|   <PERIOD> t = <IDENTIFIER> {
    return new ASTClassVariable(base, t.image, 0);}

    // ASTArrayVariable(ASTVariable base, ASTExpression index, int line)
    // ASTClassVariable(ASTVariable base, String variable, int line)
}

// Goes to either new_array_instance() or new_class_instance()
// ex:  new int[][][]
//      new Object(2, 3)
ASTExpression new_expression():
{
    ASTExpression expression;
    String type;
}
{
    <NEW> type = <IDENTIFIER>.image (expression = new_array_instance(type) | expression = new_class_instance(type)) {return expression;}
}

// new <ID> <LEFT_BRACKET>
ASTNewArrayExpression new_array_instance(String type):
{
    String element;
    ASTExpression value;
    int arraydimension = 1;
    int line = 0;
}
{
    <LEFT_BRACKET> value = expression() <RIGHT_BRACKET> (arraydimension = dimension_consumer() {arraydimension++;})?
    {
        return new ASTNewArrayExpression(type, value, arraydimension, line);
    }
}

// new <ID> <LEFT_PARENTHESIS>
ASTNewClassExpression new_class_instance(String type):
{
    String element;
    int arraydimension = 1;
    int line = 0;
}
{
     <LEFT_PARENTHESIS><RIGHT_PARENTHESIS>
    {
        return new ASTNewClassExpression(type, 0);
    }

    // ASTNewClassExpression(String type, int line)
}

ASTClass class_def():
{
    Token name;
    ASTInstanceVariableDefs v = new ASTInstanceVariableDefs();
    ASTInstanceVariableDef i;
}
{
    <CLASS> name = <IDENTIFIER> <LEFT_BRACE> (i = instance_variable() {v.addElement(i);})* <RIGHT_BRACE>
    {return new ASTClass(name.image, v, 0);}
}

ASTInstanceVariableDef instance_variable():
{
    ASTStatement statement;
    ASTVariable variable_ = null;
    String name = "";
    String type = "";
    int arraydimension = 0;
    ASTExpression init = null;
    boolean isDefinition = false;
    boolean isArrayExpression = false;
}
{
    ( LOOKAHEAD(2) type = <IDENTIFIER>.image name = <IDENTIFIER>.image (arraydimension = dimension_consumer() {isArrayExpression = true;})? {isDefinition = true;}
    | LOOKAHEAD(2) variable_ = variable()
    | name = <IDENTIFIER>.image {variable_ = new ASTBaseVariable(name, 0);}
    )

    (<SEMICOLON> | <EQUALS> init = expression() <SEMICOLON>)


    {   if(isDefinition){
            if (isArrayExpression){
                return new ASTInstanceVariableDef(type, name, arraydimension, 0);
            }else{
                return new ASTInstanceVariableDef(type, name, 0);
            }
        }
    }
}

ASTDoWhileStatement do_while():
{
    ASTStatement s;
    ASTExpression e;
}
{
    <DO> s = one_statement() <WHILE> <LEFT_PARENTHESIS> e = expression() <RIGHT_PARENTHESIS> <SEMICOLON>
    {return new ASTDoWhileStatement(e, s, 0);}
}

ASTWhileStatement while_statement():
{
    ASTExpression e;
    ASTStatement s;
}
{
    <WHILE> <LEFT_PARENTHESIS> e = expression() <RIGHT_PARENTHESIS> s = one_statement()
    {return new ASTWhileStatement(e, s, 0);}
}

ASTEmptyStatement empty_statement():
{}
{
    <SEMICOLON> {return new ASTEmptyStatement(0);}
}

ASTForStatement for_statement():
{
    ASTStatement initialize;
    ASTExpression test;
    ASTStatement increment;
    ASTStatement body;
}
{
    <FOR> <LEFT_PARENTHESIS> initialize = var_statement() <SEMICOLON> test = expression() <SEMICOLON> (LOOKAHEAD(2) increment = increment_statement() | increment = var_statement()) <RIGHT_PARENTHESIS> body = one_statement()
    {return new ASTForStatement(initialize, test, increment, body, 0);}
}

ASTStatements block_statement():
{
    ASTStatements statements = new ASTStatements();
    ASTStatement s;
}
{
    <LEFT_BRACE> (s = one_statement() {statements.addElement(s);})* <RIGHT_BRACE>
    {return statements;}
}

ASTFunctionCallStatement function_statement():
{
    Token name;
    ASTExpression e;
    ASTFunctionCallStatement f = new ASTFunctionCallStatement("", 0);
    System.out.println("entered function_statement");
}
{
    name = <IDENTIFIER> {f.setname(name.image);} <LEFT_PARENTHESIS> (e = expression() (<COMMA>)? {f.addElement(e);})* <RIGHT_PARENTHESIS> <SEMICOLON>
    {return f;}
}
